schema {
  query: MappingQuery
}

enum Comparison {
  contains
  endsWith
  equal
  greaterThan
  greaterThanOrEqual
  notIn
  in
  lessThan
  lessThanOrEqual
  like
  startsWith
}

enum Connector {
  and
  or
}

scalar Id

type MappingChild {
  parent: MappingParent!
  id: Id!
  parentId: Id!
  property: String
}

type MappingParent {
  children(id: Id, ids: [Id!], where: [WhereExpression!], orderBy: [OrderBy!], skip: Int, take: Int): [MappingChild!]!
  id: Id!
  jsonProperty: [String!]!
  property: String
}

type MappingQuery {
  child(id: Id, ids: [Id!], where: [WhereExpression!]): MappingChild!
  children(id: Id, ids: [Id!], where: [WhereExpression!], orderBy: [OrderBy!], skip: Int, take: Int): [MappingChild!]!
  parent(id: Id, ids: [Id!], where: [WhereExpression!]): MappingParent!
  parents(id: Id, ids: [Id!], where: [WhereExpression!], orderBy: [OrderBy!], skip: Int, take: Int): [MappingParent!]!
}

input OrderBy {
  path: String!
  descending: Boolean
}

enum StringComparison {
  CURRENT_CULTURE
  CURRENT_CULTURE_IGNORE_CASE
  INVARIANT_CULTURE
  INVARIANT_CULTURE_IGNORE_CASE
  ORDINAL
  ORDINAL_IGNORE_CASE
}

input WhereExpression {
  path: String
  comparison: Comparison
  negate: Boolean
  case: StringComparison
  value: [String]
  connector: Connector
  groupedExpressions: [WhereExpression]
}
